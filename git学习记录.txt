git init :创建一个本地仓库

git log ：查看日志
git log -- oneline :单行查看日志
git log --oneline --graph : 显示分支

git add 1.py ：将1.py的修改添加到staged状态
git add . :将所有的修改添加到staged状态

git status : 查看当前状态
git status -s :简单查看当前状态

git commit -m "change 1"：将staged状态的修改提交，并且本次修改的名字change 1
git commit -am "change 1":将修改添加都staged状态然后提交，必须是已有文件
git commit --amend -- no-edit:提交staged状态的修改，但是不改变修改日志

git diff  ：查看unstage状态的修改 （红色M） 修改但是未添加
git diff --cached ：查看staged状态的修改（绿色M）修改而且已经添加
git diff head：同时查看红色和绿色的M

git reset 1.py ：将提交到staged状态的修改返回到为提交状态的修改，绿色M变成红色M

git reset --hard head ：返回到最后一次提交的状态，如果做了修改或者，添加了修改会返回
git reset --hard head^^:回到上上个提交状态
git reset --hard head~2:回到前两个状态
git reset --hard 2a1423: 回到id为2a1423: 的状态

git reflog :查看相对日志，因为回到过去后看不到未来的日志

git checkourt 2a1423 -- 1.py: 让1.py回到id为2a1423的状态
  
分支：
git branch dev ：创建分支dev
git checkout -b dev ：创建分支dev并且切换到分支dev
git branch -d dev ：删除掉dev分支
git branch ：查看所有分支
git checkout dev：切换到dev分支
git merge -- no-ff -m "keep mearge info" dev :将dev版本的信息同步到本分支


